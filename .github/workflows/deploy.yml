name: Spring Boot Gradle CI/CD 배포

on:
  push:
    branches: [ "develop", "test/ci" ]
  repository_dispatch:
    types: [config-updated]  # live-config에서 트리거
  workflow_dispatch:  # 수동 트리거
    inputs:
      reason:
        description: '배포 사유'
        required: false
        default: '수동 배포'

env:
  PROJECT_NAME: live-backend
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: lively-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: live-codedeploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: live-codedeploy-group

permissions:
  contents: read

jobs:
  # develop 브랜치 push 또는 config 업데이트 시 실행
  deploy:
    runs-on: ubuntu-latest

    # MySQL과 Redis 서비스 추가
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost -uroot -proot"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📋 배포 사유 출력
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "🔄 Config 업데이트로 인한 자동 배포"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "🖱️ 수동 배포: ${{ github.event.inputs.reason }}"
          else
            echo "📝 코드 변경으로 인한 자동 배포"
          fi

      - name: ✅ 소스코드 체크아웃 (서브모듈 포함)
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.CONFIG_REPO_PAT }}

      - name: 🔄 live-config를 최신 Master로 업데이트
        run: |
          cd live-config
          git checkout Master
          git pull origin Master
          cd ..

      - name: 📁 설정 yml 파일들 복사
        run: |
          mkdir -p ./src/main/resources
          cp live-config/application-dev.yml ./src/main/resources/
          cp live-config/common.yml ./src/main/resources/
          mkdir -p ./src/test/resources
          cp live-config/application-test.yml ./src/test/resources/
          cp live-config/common.yml ./src/test/resources/

      - name: ☕ JDK 21 설정
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: ✅ gradlew 실행 권한 부여
        run: chmod +x ./gradlew

      - name: 🔍 MySQL 서비스 연결 대기
        run: |
          echo "MySQL 서비스 시작 대기 중..."
          for i in {1..30}; do
            if mysqladmin ping -h127.0.0.1 -P3306 -uroot -proot --silent; then
              echo "✅ MySQL 연결 성공!"
              break
            fi
            echo "MySQL 연결 대기 중... ($i/30)"
            sleep 2
          done

      - name: ⚙️ JAR 파일 빌드 (테스트 포함)
        run: ./gradlew clean build -Pprofile=test

      - name: 🐳 Docker 이미지 빌드
        run: docker build -t live-backend:latest .

      - name: 📦 Docker 이미지를 tar 파일로 저장
        run: docker save live-backend:latest -o live-backend.tar

      - name: 🛠 스크립트 파일들에 실행 권한 부여
        run: chmod +x scripts/*.sh

      - name: 🔐 AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 배포 패키지 준비 (ZIP 파일 생성)
        run: |
          mkdir deploy
          cp appspec.yml deploy/
          cp docker-compose.blue.yml deploy/
          cp docker-compose.green.yml deploy/
          cp live-backend.tar deploy/
          cp -r scripts deploy/
          zip -r -qq app.zip deploy/

      - name: 🔍 ZIP 파일 내용 확인
        run: unzip -l app.zip

      - name: ☁️ S3에 업로드
        run: |
          aws s3 cp app.zip s3://${{ env.S3_BUCKET_NAME }}/${{ github.sha }}.zip

      - name: 🚀 CodeDeploy 배포 생성
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --s3-location bucket=${{ env.S3_BUCKET_NAME }},key=${{ github.sha }}.zip,bundleType=zip
