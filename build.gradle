plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:1.0.0"
	}
}

dependencies {
	// Querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// S3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	implementation 'software.amazon.awssdk:s3:2.32.9'

	// Database
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Web
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// security & oauth
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	testImplementation 'org.springframework.security:spring-security-test'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// AI
	implementation 'org.springframework.ai:spring-ai-starter-vector-store-qdrant'
	implementation 'org.springframework.ai:spring-ai-starter-model-openai'
}

tasks.named('test') {
	useJUnitPlatform()
}

processResources.dependsOn('copySecret')
tasks.register('copySecret', Copy) {
	from 'live-config'
	include '*.yml', 'application-env.properties'
	into 'src/main/resources'
}

processTestResources.dependsOn('copySecretForTest')
tasks.register('copySecretForTest', Copy) {
	from 'live-config'
	include '*.yml', 'application-env.properties'
	into 'src/test/resources'
}

jacoco {
	toolVersion = '0.8.13'
}

jacocoTestReport {
	dependsOn test
	
	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}
	
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/Q*',
				'**/Q*$*',
				'**/QEntity*',
				'**/*Config*',
				'**/*Application*'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.80
			}
		}
	}
	
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/Q*',
				'**/Q*$*',
				'**/QEntity*',
				'**/*Config*',
				'**/*Application*'
			])
		}))
	}
}

test {
	finalizedBy jacocoTestReport
}
